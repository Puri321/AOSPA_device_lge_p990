From df2ca540968b300aae0983cef697387429ec6711 Mon Sep 17 00:00:00 2001
From: Matt Mower <mowerm@gmail.com>
Date: Mon, 6 Jan 2014 20:11:11 -0600
Subject: [PATCH 3/4] Advanced storage: swap primary storage for apps

Advanced storage settings patch series:
[1/4] vold: allow swapped storage paths at vold init
      http://review.cyanogenmod.org/56515
[2/4] Advanced storage: vold swap storage paths
      http://review.cyanogenmod.org/56516
[3/4] storage: allow swapping primary storage for apps
      http://review.cyanogenmod.org/56950
[4/4] Advanced storage: swap primary storage for apps
      http://review.cyanogenmod.org/56951

This adds a new preference to Advanced storage settings to swap the
primary storage path used for applications storage. Only
one of the two primary storage swap methods can be active at a time.

This option is currently restricted to a secondary storage device
located at /storage/sdcard1 to prevent swapping with not-so-permanent
devices like usbdisk.

The effect of this option can be verified by going to Settings > Apps
and swiping over to "ON SD CARD". The bar at the bottom of the screen
should have used/free spaces corresponding to /storage/sdcard1.

Inspiration for this storage swap method comes from Martin Meloun.

Change-Id: I5eb31735baeb8e356f94cc1b87fa9618023db8ce
---
 res/values/cm_strings.xml                          |   8 +-
 res/xml/advanced_storage_settings.xml              |   9 ++
 .../deviceinfo/AdvancedStorageSettings.java        | 106 +++++++++++++++++----
 src/com/android/settings/deviceinfo/Memory.java    |  14 ++-
 4 files changed, 113 insertions(+), 24 deletions(-)

diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index d6ad376..2e1412e 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -312,8 +312,14 @@ two in order to insert additional control points. \'Remove\' deletes the selecte
     <string name="storage_title_advanced">Advanced storage settings</string>
     <string name="storage_menu_advanced">Advanced storage settings</string>
     <string name="as_primary_storage_category">Primary storage</string>
+    <string name="as_primary_storage_warning">Both system and environment primary storage swap methods are enabled. This should not happen. Disable one or both of the swap methods.</string>
     <string name="as_sys_swap_title">Swap system vold primary</string>
-    <string name="as_sys_swap_summary">Change primary storage by swapping sdcard0 and sdcard1 during vold initialization</string>
+    <string name="as_sys_swap_summary">Change primary storage by swapping sdcard0 and sdcard1 during vold init</string>
+    <string name="as_sys_swap_noemulated">System vold swap unavailable for use with emulated primary storage</string>
+    <string name="as_sys_swap_envenabled">System vold swap unavailable when \'Swap environment primary\' enabled</string>
+    <string name="as_env_swap_title">Swap environment primary</string>
+    <string name="as_env_swap_summary">Make sdcard1 the primary storage for application data</string>
+    <string name="as_env_swap_sysenabled">Environment primary swap unavailable when \'Swap system vold primary\' enabled</string>
     <string name="as_swap_unavailable">No suitable storage pair was found for primary swap</string>
     <string name="as_swap_reboot_prompt_title">Reboot required</string>
     <string name="as_swap_reboot_prompt_message">In order to apply the new storage configuration, a reboot is required.\n\nDo you want to reboot now?</string>
diff --git a/res/xml/advanced_storage_settings.xml b/res/xml/advanced_storage_settings.xml
index 19eb015..df10d91 100644
--- a/res/xml/advanced_storage_settings.xml
+++ b/res/xml/advanced_storage_settings.xml
@@ -20,9 +20,18 @@
     <PreferenceCategory
         android:title="@string/as_primary_storage_category" />
 
+    <Preference
+        android:key="as_primary_storage_warning"
+        android:summary="@string/as_primary_storage_warning" />
+
     <CheckBoxPreference
         android:key="as_sys_swap"
         android:title="@string/as_sys_swap_title"
         android:summary="@string/as_sys_swap_summary" />
 
+    <CheckBoxPreference
+        android:key="as_env_swap"
+        android:title="@string/as_env_swap_title"
+        android:summary="@string/as_env_swap_summary" />
+
 </PreferenceScreen>
diff --git a/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java b/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java
index 4735276..ec53c62 100644
--- a/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java
+++ b/src/com/android/settings/deviceinfo/AdvancedStorageSettings.java
@@ -48,11 +48,17 @@ public class AdvancedStorageSettings extends SettingsPreferenceFragment {
 
     private static final String TAG = "AdvancedStorageSettings";
 
+    private static final String KEY_PRIMARY_STORAGE_WARNING = "as_primary_storage_warning";
     private static final String KEY_SYS_SWAP = "as_sys_swap";
+    private static final String KEY_ENV_SWAP = "as_env_swap";
+    private static final String ENVVOLD_SWITCH_PERSIST_PROP = "persist.sys.env.switchexternal";
     private static final String SYSVOLD_SWITCH_PERSIST_PROP = "persist.sys.vold.switchexternal";
     private static final String VOLD_SWITCHABLEPAIR_PROP = "persist.sys.vold.switchablepair";
     private static boolean mSwitchablePairFound = false;
+    private static boolean mPrimaryEmulated = Environment.isExternalStorageEmulated();
+    private Preference mPrimaryStorageWarning;
     private CheckBoxPreference mSysSwap;
+    private CheckBoxPreference mEnvSwap;
 
     private PreferenceScreen createPreferenceHierarchy() {
         PreferenceScreen root = getPreferenceScreen();
@@ -62,7 +68,9 @@ public class AdvancedStorageSettings extends SettingsPreferenceFragment {
         addPreferencesFromResource(R.xml.advanced_storage_settings);
         root = getPreferenceScreen();
 
+        mPrimaryStorageWarning = (Preference)root.findPreference(KEY_PRIMARY_STORAGE_WARNING);
         mSysSwap = (CheckBoxPreference)root.findPreference(KEY_SYS_SWAP);
+        mEnvSwap = (CheckBoxPreference)root.findPreference(KEY_ENV_SWAP);
         updateToggles();
 
         return root;
@@ -86,40 +94,95 @@ public class AdvancedStorageSettings extends SettingsPreferenceFragment {
     }
 
     private boolean setSwitchablePair() {
-        String[] primaryPath = System.getenv("EXTERNAL_STORAGE").split(File.separator);
-        String[] secondaryPath = System.getenv("SECONDARY_STORAGE").split(File.separator);
-        String primaryDir = primaryPath[primaryPath.length-1];
-        String secondaryDir = secondaryPath[secondaryPath.length-1];
+        String primaryPath = System.getenv("EXTERNAL_STORAGE");
+        String[] secondaryPaths = System.getenv("SECONDARY_STORAGE").split(":");
+        boolean[] sdxFound = { false, false };
 
-        if (TextUtils.isEmpty(primaryDir)) {
-            Log.e(TAG,"Unable to find primary storage device for vold swap");
-            return false;
+        if (TextUtils.equals(primaryPath, "/storage/sdcard0")) {
+            sdxFound[0] = true;
+        } else {
+            Log.e(TAG,"/storage/sdcard0 was not found");
+            Log.e(TAG,"System vold swap unavailable");
         }
-        if (Environment.isExternalStorageEmulated()) {
-            Log.e(TAG,"Vold swap does not support emulated primary storage");
-            return false;
+
+        for (String secondaryPath : secondaryPaths) {
+            if (TextUtils.equals(secondaryPath, "/storage/sdcard1")) {
+                sdxFound[1] = true;
+            }
         }
-        if (!TextUtils.equals(secondaryDir, "sdcard1")) {
-            Log.e(TAG,"Unable to find secondary storage device sdcard1 for vold swap");
+
+        if (!sdxFound[1]) {
+            Log.e(TAG,"/storage/sdcard1 was not found");
+            Log.e(TAG,"System vold swap unavailable");
+            Log.e(TAG,"Environment primary swap unavailable");
+
             return false;
         }
 
-        SystemProperties.set(VOLD_SWITCHABLEPAIR_PROP, primaryDir + ','
-            + secondaryDir);
-        Log.i(TAG, "System property set: " + VOLD_SWITCHABLEPAIR_PROP + "="
-            + primaryDir + ',' + secondaryDir);
+        if (sdxFound[0] && sdxFound[1]) {
+            SystemProperties.set(VOLD_SWITCHABLEPAIR_PROP, "sdcard0,sdcard1");
+            Log.i(TAG, "System property set: " + VOLD_SWITCHABLEPAIR_PROP
+                    + "=sdcard0,sdcard1");
+        }
+
         return true;
     }
 
     private void updateToggles() {
-        if (mSwitchablePairFound) {
-            if(SystemProperties.get(SYSVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+        mPrimaryStorageWarning.setEnabled(false);
+        if (!SystemProperties.get(SYSVOLD_SWITCH_PERSIST_PROP).equals("1") ||
+                !SystemProperties.get(ENVVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+            removePreference(KEY_PRIMARY_STORAGE_WARNING);
+        }
+
+        if (mSwitchablePairFound && !mPrimaryEmulated) {
+            if (SystemProperties.get(SYSVOLD_SWITCH_PERSIST_PROP).equals("1") &&
+                    SystemProperties.get(ENVVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+                // This case should not be encountered if system properties are
+                // set via this Settings menu
+                mEnvSwap.setSummary(R.string.as_env_swap_summary);
+                mEnvSwap.setChecked(true);
+                mEnvSwap.setEnabled(true);
+                mSysSwap.setSummary(R.string.as_sys_swap_summary);
                 mSysSwap.setChecked(true);
+                mSysSwap.setEnabled(true);
+            } else if (SystemProperties.get(SYSVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+                mEnvSwap.setSummary(R.string.as_env_swap_sysenabled);
+                mEnvSwap.setChecked(false);
+                mEnvSwap.setEnabled(false);
+                mSysSwap.setSummary(R.string.as_sys_swap_summary);
+                mSysSwap.setChecked(true);
+                mSysSwap.setEnabled(true);
+            } else if (SystemProperties.get(ENVVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+                mEnvSwap.setSummary(R.string.as_env_swap_summary);
+                mEnvSwap.setChecked(true);
+                mEnvSwap.setEnabled(true);
+                mSysSwap.setSummary(R.string.as_sys_swap_envenabled);
+                mSysSwap.setChecked(false);
+                mSysSwap.setEnabled(false);
             } else {
+                mEnvSwap.setSummary(R.string.as_env_swap_summary);
+                mEnvSwap.setChecked(false);
+                mEnvSwap.setEnabled(true);
+                mSysSwap.setSummary(R.string.as_sys_swap_summary);
                 mSysSwap.setChecked(false);
+                mSysSwap.setEnabled(true);
+            }
+        } else if (mSwitchablePairFound && mPrimaryEmulated) {
+            mSysSwap.setSummary(R.string.as_sys_swap_noemulated);
+            mSysSwap.setChecked(false);
+            mSysSwap.setEnabled(false);
+            if (SystemProperties.get(ENVVOLD_SWITCH_PERSIST_PROP).equals("1")) {
+                mEnvSwap.setChecked(true);
+                mEnvSwap.setEnabled(true);
+            } else {
+                mEnvSwap.setChecked(false);
+                mEnvSwap.setEnabled(true);
             }
-            mSysSwap.setEnabled(true);
         } else {
+            mEnvSwap.setChecked(false);
+            mEnvSwap.setSummary(R.string.as_swap_unavailable);
+            mEnvSwap.setEnabled(false);
             mSysSwap.setChecked(false);
             mSysSwap.setSummary(R.string.as_swap_unavailable);
             mSysSwap.setEnabled(false);
@@ -157,6 +220,11 @@ public class AdvancedStorageSettings extends SettingsPreferenceFragment {
                 mSysSwap.isChecked() ? "1" : "0");
             Log.i(TAG, "System property set: " + SYSVOLD_SWITCH_PERSIST_PROP
                   + "=" + SystemProperties.get(SYSVOLD_SWITCH_PERSIST_PROP));
+        } else if (preference == mEnvSwap) {
+            SystemProperties.set(ENVVOLD_SWITCH_PERSIST_PROP,
+                mEnvSwap.isChecked() ? "1" : "0");
+            Log.i(TAG, "System property set: " + ENVVOLD_SWITCH_PERSIST_PROP
+                  + "=" + SystemProperties.get(ENVVOLD_SWITCH_PERSIST_PROP));
         }
         updateToggles();
         showRebootPrompt();
diff --git a/src/com/android/settings/deviceinfo/Memory.java b/src/com/android/settings/deviceinfo/Memory.java
index 61c8af7..f15a4cf 100644
--- a/src/com/android/settings/deviceinfo/Memory.java
+++ b/src/com/android/settings/deviceinfo/Memory.java
@@ -182,10 +182,16 @@ public class Memory extends SettingsPreferenceFragment {
         usb.setVisible(usbItemVisible);
 
         final MenuItem advStorage = menu.findItem(R.id.storage_advanced);
-        String secondaryPath = System.getenv("SECONDARY_STORAGE");
-        boolean advStorageItemVisibleSec = TextUtils.equals(secondaryPath, "/storage/sdcard1");
-        boolean advStorageItemVisibleEmu = !Environment.isExternalStorageEmulated();
-        advStorage.setVisible(advStorageItemVisibleSec && advStorageItemVisibleEmu);
+        boolean advStorageItemVisible = false;
+        String secondaryPaths = System.getenv("SECONDARY_STORAGE");
+        if (!TextUtils.isEmpty(secondaryPaths)) {
+            for (String secondaryPath : secondaryPaths.split(":")) {
+                if (TextUtils.equals(secondaryPath, "/storage/sdcard1")) {
+                    advStorageItemVisible = true;
+                }
+            }
+        }
+        advStorage.setVisible(advStorageItemVisible);
     }
 
     @Override
-- 
1.9.1

